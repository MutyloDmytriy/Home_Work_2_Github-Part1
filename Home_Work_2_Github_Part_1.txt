
Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.
Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.
Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

JSON
 4. Создать внешний репозиторий c названием JSON.-
   Заходим на githab , выбираем repositories > new. B Repository name пишем jason 
 5. Клонировать репозиторий JSON на локальный компьютер. - 
  git clone https://github.com/MutyloDmytriy/Json.git

 6. Внутри локального JSON создать файл “new.json”. 
  - cd json(зашли в папку)  cat > new.json(можно сразу писать текст в папке) ctrl+c- сохранить то что написали и выйти 

 7. Добавить файл под гит. 
 - git add new.json Проверим статус - git status

 8. Закоммитить файл.
git commit -m new.json

 9. Отправить файл на внешний GitHub репозиторий.
  - git push

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.-
 - cat > new.json
 {
   "name":"Dmutro",
   "surname":"Mytulo",
   "age":30,
   "pets":0,
   "expected_salary_usd":1000
    }


 11. Отправить изменения на внешний репозиторий.
 -git add new.json;  git status; git commit -m new.json; git push. 
  git commit -am "first changes to new.json"
     git push
 12. Создать файл preferences.json
 touch preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.

cat >> preferences.json

{
   "film":"Mahabharata",
   "TVShow":"Hare Krishna",
   "food":"prasad",
   "season":"sammer",
   "countryIwouldliketovisit":"India"
}

 

 14. Создать файл skills.json добавить информацию о скиллах которые будут изучены
     на курсе в формате JSON 

 cat > skills.json

     {
   "hard_skills":[
      "QA_basics",
      "HTTP_methods",
      "Bash",
      "Git",
      "Postman",
      "DevTools",
      "SQL"
   ],
   "soft_skills":[
      "time_management",
      "adaptivity",
      "collaboration",
      "stress_management",
      "mentoring"
   ]
}
 15. Отправить сразу 2 файла на внешний репозиторий.
    git add . && git commit -m "two JSON files sent"
    git push
 16. На веб интерфейсе создать файл bug_report.json. Выбрать Add fail; Create file.Напишем название
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.ВВедем название нашего файла.Нажмем сохранить (Создать файл)
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON. Вводим составные части Отчет об ошибке в формате json.Нажмем Зафиксировать изменения
{
   "bug_id":1,
   "project":"application_1",
   "title":"invoice cannot be printed by the user",
   "summary":"invoice cannot be printed by the user in application_1 when the user presses 'Print' button on main panel",
   "environment":{
      "device":"MyPC",
      "OS":"Windows_10",
      "version":"12SRE12"
   },
   "steps_to_reproduce":{
      "1":"open 'application_1'",
      "2":"press 'create_invoice' button",
      "3":"press 'print_invoice' button"
   },
   "attachment":"video",
   "actual_result":"nothing happens when button is pressed",
   "expected_result":"invoice_printed",
   "priority":"critical",
   "assignee":"Dmitriy",
   "reporter":"Dmitriy"
}
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе. 
 20. Синхронизировать внешний и локальный репозиторий JSON
   git pull

XML
 21. Создать внешний репозиторий c названием XML. Заходим в GITHUB.Находимся в своем профиле Выбираем репозитории и выбираем New.В имени репозитория пишем название.Если нужно описание.
 22. Клонировать репозиторий XML на локальный компьютер.
 git clone https://github.com/MutyloDmytriy/xml.git 
 23. Внутри локального XML создать файл “new.xml”.
 cd.XML cat > new.xml
 24. Добавить файл под гит. git add new.xml git status 
 25. Закоммитить файл. git commit -m new.xml
 26. Отправить файл на внешний GitHub репозиторий.git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
cat >> new.xml

<?xml version="1.0" encoding="UTF-8" ?>
<root>
  <name>Dmitriy</name>
  <surname>Mutilo</surname>
  <age>30</age>
  <pets>0</pets>
  <expected_salary_usd>1000</expected_salary_usd>
</root>
 28. Отправить изменения на внешний репозиторий.
    git commit -am "update new.xml"
    git push
 29. Создать файл preferences.xml
 cat > preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.

cat > preferences.xml

<?xml version="1.0" encoding="UTF-8" ?>
<root>
  <film>Prabhupada</film>
  <TVShow>Mahabharata</TVShow>
  <food>prasad</food>
  <season>summer</season>
  <countryIwouldliketovisit>India</countryIwouldliketovisit>
</root>
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
  cat > skills.xml

<?xml version="1.0" encoding="UTF-8"?>
<root>
  <hard_skills>QA_basics</hard_skills>
  <hard_skills>HTTP_methods</hard_skills>
  <hard_skills>Bash</hard_skills>
  <hard_skills>Git</hard_skills>
  <hard_skills>Postman</hard_skills>
  <hard_skills>DevTools</hard_skills>
  <hard_skills>SQL</hard_skills>
  <soft_skills>time_management</soft_skills>
  <soft_skills>adaptivity</soft_skills>
  <soft_skills>collaboration</soft_skills>
  <soft_skills>stress_management</soft_skills>
  <soft_skills>mentoring</soft_skills>
</root>
 32. Сделать коммит в одну строку.
  git add . && git commit -m "two XMLs added"
 33. Отправить сразу 2 файла на внешний репозиторий.
 git push
 34. На веб интерфейсе создать файл bug_report.xml.
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.

<?xml version="1.0" encoding="UTF-8"?>
<root>
  <bug_id number="true">1</bug_id>
  <project>application_1</project>
  <title>invoice cannot be printed by the user</title>
  <summary>invoice cannot be printed by the user in application_1 when the user presses 'Print' button on main panel</summary>
  <environment>
    <device>MyPC</device>
    <OS>Windows_10</OS>
    <version>12SRE12</version>
  </environment>
  <steps_to_reproduce>
    <step1>open 'application_1'</step1>
    <step2>press 'create_invoice' button</step2>
    <step3>press 'print_invoice' button</step3>
  </steps_to_reproduce>
  <attachment>video</attachment>
  <actual_result>nothing happens when button is pressed</actual_result>
  <expected_result>invoice_printed</expected_result>
  <priority>critical</priority>
  <assignee>Andrey</assignee>
  <reporter>Andrey</reporter>
</root>
  
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 38. Синхронизировать внешний и локальный репозиторий XML 
  git pull


 1. Создать внешний репозиторий c названием TXT.
 2. Клонировать репозиторий TXT на локальный компьютер.
  git clone https://github.com/MutyloDmytriy/TXT.git
 3. Внутри локального TXT создать файл “new.txt”. 
  cd > new.txt 
 4. Добавить файл под гит. 
  git add new.txt
 5. Закоммитить файл.
git commit -m new.txt
 6. Отправить файл на внешний GitHub репозиторий. git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT. cat > new.txt 
 8. Отправить изменения на внешний репозиторий. git commit -m new.txt git push
 9. Создать файл preferences.txt cat > preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT cat> skills.txt
 12. Сделать коммит в одну строку.
git add -A && git commit -m preferences.txt/skills.txt
 13. Отправить сразу 2 файла на внешний репозиторий. git push
 14. На веб интерфейсе создать файл bug_report.txt.
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Введем название нашего файла.Нажмем сохранить (Создать файл)
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
Зайдем в файл bug_report.xml.Справа есть карандашик "Редактировать этот файл".Нажимаем и переносим
изменения.Нажимаем Зафиксировать изменения
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.Введем составные части Bug Report в формате xml.Нажмем Commit changes
